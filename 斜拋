<!DOCTYPE html>
<html lang="zh-Hant">
<head>
  <meta charset="UTF-8">
  <title>斜拋模擬</title>
  <style>
    canvas { border: 1px solid black; }
    .controls { margin-top: 10px; font-family: sans-serif; }
    label { margin-right: 10px; }
    .section { margin-top: 15px; }
  </style>
</head>
<body>
  <h2>斜拋模擬</h2>
  <canvas id="trajectoryCanvas" width="600" height="400"></canvas>
  <div class="controls">
    <label>初速 (m/s): <input type="range" id="speedSlider" min="10" max="50" value="30"></label>
    <span id="speedValue">30</span>
    <label>角度 (°): <input type="range" id="angleSlider" min="10" max="80" value="45"></label>
    <span id="angleValue">45</span>
    <label>拋射圖縮放: <input type="range" id="scaleSlider" min="3" max="20" step="1" value="10"></label>
    <span id="scaleValue">10</span>
    <button id="toggleBtn">開始</button>
    <div>小球質量：1 kg，重力加速度：9.8 m/s²</div>
    <div id="info"></div>
  </div>

  <div class="section">
    <canvas id="energyCanvas" width="600" height="300"></canvas>
    <label>能量圖縮放: <input type="range" id="energyScaleSlider" min="0.1" max="3" step="0.1" value="1"></label>
    <span id="energyScaleValue">1</span>
  </div>

  <script>
    const g = 9.8;
    const mass = 1;
    const trajectoryCanvas = document.getElementById('trajectoryCanvas');
    const ctx = trajectoryCanvas.getContext('2d');

    const energyCanvas = document.getElementById('energyCanvas');
    const ectx = energyCanvas.getContext('2d');

    const speedSlider = document.getElementById('speedSlider');
    const angleSlider = document.getElementById('angleSlider');
    const scaleSlider = document.getElementById('scaleSlider');
    const energyScaleSlider = document.getElementById('energyScaleSlider');

    const toggleBtn = document.getElementById('toggleBtn');
    const info = document.getElementById('info');

    let animationRunning = false;
    let t = 0;
    let data = [];
    let interval;

    function drawAxes(ctx, width, height, scale, xStep, yStep) {
      ctx.strokeStyle = "#ccc";
      ctx.lineWidth = 1;
      ctx.beginPath();
      for (let x = 0; x <= width; x += scale * xStep) {
        ctx.moveTo(x, 0);
        ctx.lineTo(x, height);
      }
      for (let y = 0; y <= height; y += scale * yStep) {
        ctx.moveTo(0, y);
        ctx.lineTo(width, y);
      }
      ctx.stroke();

      ctx.fillStyle = "black";
      ctx.font = "10px sans-serif";
      for (let x = 0; x <= width; x += scale * xStep) {
        ctx.fillText((x / scale).toFixed(0), x + 2, height - 2);
      }
      for (let y = 0; y <= height; y += scale * yStep) {
        ctx.fillText(((height - y) / scale).toFixed(0), 2, y - 2);
      }
    }

    function draw() {
      const v = parseFloat(speedSlider.value);
      const angle = parseFloat(angleSlider.value) * Math.PI / 180;
      const vx = v * Math.cos(angle);
      const vy = v * Math.sin(angle);
      const scale = parseFloat(scaleSlider.value);
      const width = trajectoryCanvas.width;
      const height = trajectoryCanvas.height;
      const x = vx * t;
      const y = vy * t - 0.5 * g * t * t;
      const px = x * scale;
      const py = height - y * scale;

      ctx.clearRect(0, 0, width, height);
      drawAxes(ctx, width, height, scale, 5, 5);
      ctx.fillStyle = "red";
      ctx.beginPath();
      ctx.arc(px, py, 7, 0, 2 * Math.PI);
      ctx.fill();

      const totalTime = 2 * vy / g;
      const maxHeight = vy * vy / (2 * g);
      const range = vx * totalTime;

      info.innerHTML = `最大高度：${maxHeight.toFixed(2)} m，水平距離：${range.toFixed(2)} m，飛行時間：${totalTime.toFixed(2)} s`;

      const h = y;
      const potential = mass * g * Math.max(0, h);
      const velocity = Math.sqrt(vx * vx + (vy - g * t) * (vy - g * t));
      const kinetic = 0.5 * mass * velocity * velocity;
      data.push({ t, potential, kinetic });
      drawEnergyGraph();
    }

    function drawEnergyGraph() {
      const scaleY = parseFloat(energyScaleSlider.value);
      const width = energyCanvas.width;
      const height = energyCanvas.height;
      ectx.clearRect(0, 0, width, height);
      drawAxes(ectx, width, height, 50, 1, 10);

      ectx.lineWidth = 2;
      ectx.strokeStyle = "blue";
      ectx.beginPath();
      data.forEach((d, i) => {
        const x = d.t * 50;
        const y = height - d.potential * scaleY;
        if (i === 0) ectx.moveTo(x, y);
        else ectx.lineTo(x, y);
      });
      ectx.stroke();

      ectx.strokeStyle = "orange";
      ectx.beginPath();
      data.forEach((d, i) => {
        const x = d.t * 50;
        const y = height - d.kinetic * scaleY;
        if (i === 0) ectx.moveTo(x, y);
        else ectx.lineTo(x, y);
      });
      ectx.stroke();
    }

    function update() {
      draw();
      t += 0.05;
      const angle = parseFloat(angleSlider.value) * Math.PI / 180;
      const vy = parseFloat(speedSlider.value) * Math.sin(angle);
      if (t > 2 * vy / g) {
        clearInterval(interval);
        animationRunning = false;
        toggleBtn.textContent = "開始";
      }
    }

    toggleBtn.onclick = () => {
      if (animationRunning) {
        clearInterval(interval);
        animationRunning = false;
        toggleBtn.textContent = "開始";
      } else {
        t = 0;
        data = [];
        animationRunning = true;
        toggleBtn.textContent = "暫停";
        interval = setInterval(update, 30);
      }
    };

    function updateLabels() {
      document.getElementById("speedValue").textContent = speedSlider.value;
      document.getElementById("angleValue").textContent = angleSlider.value;
      document.getElementById("scaleValue").textContent = scaleSlider.value;
      document.getElementById("energyScaleValue").textContent = energyScaleSlider.value;
    }

    speedSlider.oninput = angleSlider.oninput = scaleSlider.oninput = energyScaleSlider.oninput = updateLabels;
    updateLabels();
    draw();
  </script>
</body>
</html>
